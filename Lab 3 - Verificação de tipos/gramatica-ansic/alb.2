FLOAT float
ID calcula_ultimo_valor
LPAREN (
INT int
ID a
COMMA ,
FLOAT float
ID c
COMMA ,
FLOAT float
ID result
RPAREN )
LBRACE {
INT int
ID b
ASSIGN =
INT_DECIMAL 7
SEMICOLON ;
FLOAT float
ID d
ASSIGN =
FLOAT_CONSTANT 17.6
SEMICOLON ;
ID a
ASSIGN =
INT_DECIMAL 7
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 11.9
SEMICOLON ;
IF if
LPAREN (
ID a
LESS_THAN <
ID b
RPAREN )
LBRACE {
ID a
ASSIGN =
INT_DECIMAL 18
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 17.6
SEMICOLON ;
RBRACE }
ELSE else
LBRACE {
ID a
ASSIGN =
INT_DECIMAL 38
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 75.6
DIV /
ID d
SEMICOLON ;
RBRACE }
IF if
LPAREN (
ID c
EQ ==
ID d
RPAREN )
LBRACE {
ID b
ASSIGN =
INT_DECIMAL 21
PLUS +
ID d
SEMICOLON ;
ID d
ASSIGN =
FLOAT_CONSTANT 29.5
SEMICOLON ;
RBRACE }
ELSE else
LBRACE {
ID b
ASSIGN =
INT_DECIMAL 61
PLUS +
ID d
SEMICOLON ;
ID d
ASSIGN =
FLOAT_CONSTANT 59.4
SEMICOLON ;
RBRACE }
IF if
LPAREN (
ID b
LESS_THAN <
ID a
LOGICAL_OR ||
ID d
LESS_THAN <
ID c
RPAREN )
LBRACE {
ID a
ASSIGN =
INT_DECIMAL 18
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 17.6
SEMICOLON ;
RBRACE }
ELSE else
LBRACE {
ID a
ASSIGN =
INT_DECIMAL 38
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 75.6
SEMICOLON ;
RBRACE }
IF if
LPAREN (
ID a
LESS_THAN <
ID b
LOGICAL_AND &&
ID c
LESS_THAN <
ID d
RPAREN )
LBRACE {
ID a
ASSIGN =
INT_DECIMAL 45
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 87.6
MULT *
ID d
SEMICOLON ;
RBRACE }
ELSE else
LBRACE {
ID a
ASSIGN =
INT_DECIMAL 48
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 65.6
PLUS +
ID d
SEMICOLON ;
RBRACE }
IF if
LPAREN (
ID b
LESS_THAN <
ID a
RPAREN )
LBRACE {
ID a
ASSIGN =
INT_DECIMAL 5
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 7.6
MULT *
ID d
SEMICOLON ;
RBRACE }
ELSE else
LBRACE {
ID a
ASSIGN =
INT_DECIMAL 8
SEMICOLON ;
ID c
ASSIGN =
FLOAT_CONSTANT 5.6
PLUS +
ID d
SEMICOLON ;
RBRACE }
ID result
ASSIGN =
ID a
MULT *
ID c
MINUS -
ID b
DIV /
ID d
SEMICOLON ;
RETURN return
ID result
SEMICOLON ;
RBRACE }
$ $
