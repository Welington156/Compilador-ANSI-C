INT int
ID operacoes_aritmeticas
LPAREN (
INT int
ID a
COMMA ,
INT int
ID b
COMMA ,
FLOAT float
ID c
COMMA ,
FLOAT float
ID d
RPAREN )
LBRACE {
INT int
ID soma
ASSIGN =
ID a
PLUS +
ID b
SEMICOLON ;
INT int
ID subtracao
ASSIGN =
ID a
MINUS -
ID b
SEMICOLON ;
INT int
ID multiplicacao
ASSIGN =
ID a
MULT *
ID b
SEMICOLON ;
INT int
ID divisao
ASSIGN =
ID a
DIV /
ID b
SEMICOLON ;
INT int
ID resto
ASSIGN =
ID a
MOD %
ID b
SEMICOLON ;
FLOAT float
ID expression
ASSIGN =
ID c
PLUS +
ID d
MULT *
ID d
DIV /
LPAREN (
ID c
PLUS +
ID d
RPAREN )
SEMICOLON ;
ID printf
LPAREN (
STRING_LITERAL "Soma: %d\n"
COMMA ,
ID soma
RPAREN )
SEMICOLON ;
ID printf
LPAREN (
STRING_LITERAL "Subtracao: %d\n"
COMMA ,
ID subtracao
RPAREN )
SEMICOLON ;
ID printf
LPAREN (
STRING_LITERAL "Multiplicacao: %d\n"
COMMA ,
ID multiplicacao
RPAREN )
SEMICOLON ;
ID printf
LPAREN (
STRING_LITERAL "Divisao: %d\n"
COMMA ,
ID divisao
RPAREN )
SEMICOLON ;
ID printf
LPAREN (
STRING_LITERAL "Resto da divisao: %d\n"
COMMA ,
ID resto
RPAREN )
SEMICOLON ;
ID printf
LPAREN (
STRING_LITERAL "Expressão: %f\n"
COMMA ,
ID expression
RPAREN )
SEMICOLON ;
RETURN return
ID soma
SEMICOLON ;
RBRACE }
VOID void
ID operacoes_comparacao
LPAREN (
INT int
ID x
COMMA ,
INT int
ID y
RPAREN )
LBRACE {
IF if
LPAREN (
ID x
LESS_THAN <
ID y
RPAREN )
LBRACE {
ID printf
LPAREN (
STRING_LITERAL "%d é menor que %d\n"
COMMA ,
ID x
COMMA ,
ID y
RPAREN )
SEMICOLON ;
RBRACE }
ELSE else
LBRACE {
ID printf
LPAREN (
STRING_LITERAL "%d é maior ou igual a %d\n"
COMMA ,
ID x
COMMA ,
ID y
RPAREN )
SEMICOLON ;
RBRACE }
IF if
LPAREN (
ID x
NOT_EQUAL !=
ID y
RPAREN )
LBRACE {
ID printf
LPAREN (
STRING_LITERAL "%d é diferente de %d\n"
COMMA ,
ID x
COMMA ,
ID y
RPAREN )
SEMICOLON ;
RBRACE }
RBRACE }
VOID void
ID operacoes_logicas
LPAREN (
INT int
ID x
COMMA ,
INT int
ID y
RPAREN )
LBRACE {
IF if
LPAREN (
ID x
GREATER_THAN >
INT_OCTAL 0
LOGICAL_AND &&
ID y
GREATER_THAN >
INT_OCTAL 0
RPAREN )
LBRACE {
ID printf
LPAREN (
STRING_LITERAL "Ambos os números são positivos.\n"
RPAREN )
SEMICOLON ;
RBRACE }
ELSE else
LBRACE {
ID printf
LPAREN (
STRING_LITERAL "Nenhum ou pelo menos um dos números é positivo.\n"
RPAREN )
SEMICOLON ;
RBRACE }
IF if
LPAREN (
NOT !
LPAREN (
ID x
GREATER_THAN >
INT_OCTAL 0
RPAREN )
RPAREN )
LBRACE {
ID printf
LPAREN (
STRING_LITERAL "%d não é positivo.\n"
COMMA ,
ID x
RPAREN )
SEMICOLON ;
RBRACE }
RBRACE }
INT int
ID main
LPAREN (
RPAREN )
LBRACE {
INT int
ID a
ASSIGN =
INT_DECIMAL 10
SEMICOLON ;
INT int
ID b
ASSIGN =
INT_DECIMAL 5
SEMICOLON ;
INT int
ID array
LBRACKET [
INT_DECIMAL 2
RBRACKET ]
SEMICOLON ;
ID array
LBRACKET [
INT_OCTAL 0
RBRACKET ]
ASSIGN =
INT_DECIMAL 5
SEMICOLON ;
ID array
LBRACKET [
INT_DECIMAL 1
RBRACKET ]
ASSIGN =
INT_DECIMAL 10
SEMICOLON ;
INT int
ID c
ASSIGN =
ID operacoes_aritmeticas
LPAREN (
ID a
COMMA ,
ID b
COMMA ,
ID array
LBRACKET [
INT_OCTAL 0
RBRACKET ]
COMMA ,
ID array
LBRACKET [
INT_DECIMAL 1
RBRACKET ]
RPAREN )
SEMICOLON ;
INT int
ID x
ASSIGN =
INT_DECIMAL 20
SEMICOLON ;
INT int
ID y
ASSIGN =
INT_DECIMAL 15
SEMICOLON ;
INT int
ID i
ASSIGN =
INT_OCTAL 0
SEMICOLON ;
WHILE while
LPAREN (
ID i
LESS_THAN <
INT_DECIMAL 2
RPAREN )
LBRACE {
ID printf
LPAREN (
STRING_LITERAL "array[%d] = %d\n"
COMMA ,
ID i
COMMA ,
ID array
LBRACKET [
ID i
RBRACKET ]
RPAREN )
SEMICOLON ;
ID i
PLUS_ASSIGN +=
INT_DECIMAL 1
SEMICOLON ;
RBRACE }
RETURN return
INT_OCTAL 0
SEMICOLON ;
RBRACE }
$ $
