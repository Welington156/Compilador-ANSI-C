/* Generated By:JavaCC: Do not edit this line. lexicoTokenManager.java */
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;

/** Token Manager. */
public class lexicoTokenManager implements lexicoConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x200000L) != 0L)
            return 0;
         if ((active0 & 0x3fffffffc080L) != 0L)
         {
            jjmatchedKind = 46;
            return 7;
         }
         if ((active1 & 0x10000000000L) != 0L)
            return 29;
         if ((active1 & 0x8000000000L) != 0L)
            return 106;
         if ((active1 & 0x24000000000L) != 0L)
            return 107;
         return -1;
      case 1:
         if ((active0 & 0x3fbfff9fc080L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 1;
            }
            return 7;
         }
         if ((active0 & 0x4000600000L) != 0L)
            return 7;
         return -1;
      case 2:
         if ((active0 & 0x3fbeffdf8000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 46;
               jjmatchedPos = 2;
            }
            return 7;
         }
         if ((active0 & 0x100004080L) != 0L)
            return 7;
         return -1;
      case 3:
         if ((active0 & 0x3bb2fc5d0080L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
            return 7;
         }
         if ((active0 & 0x40c03828000L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0x3ab28c580080L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x10070050000L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0x302080180080L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0xa920c400000L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active0 & 0x102080080000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 6;
            return 7;
         }
         if ((active0 & 0x200000100080L) != 0L)
            return 7;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000L);
      case 34:
         return jjStartNfaWithStates_0(0, 103, 106);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x3f00L, 0x40000000000L);
      case 37:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 38:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x810000L);
      case 39:
         return jjStartNfaWithStates_0(0, 104, 29);
      case 40:
         return jjStopAtPos(0, 94);
      case 41:
         return jjStopAtPos(0, 95);
      case 42:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000L);
      case 43:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40008L);
      case 44:
         return jjStopAtPos(0, 99);
      case 45:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000080010L);
      case 46:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000L);
      case 47:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 58:
         return jjStopAtPos(0, 101);
      case 59:
         return jjStopAtPos(0, 98);
      case 60:
         jjmatchedKind = 75;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4002200L);
      case 61:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 76;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8004400L);
      case 63:
         return jjStopAtPos(0, 100);
      case 91:
         return jjStopAtPos(0, 92);
      case 93:
         return jjStopAtPos(0, 93);
      case 94:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x20e0000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x5800000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x120000080L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000004000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100008000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xa9240000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x90000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2400000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 96);
      case 124:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1020000L);
      case 125:
         return jjStopAtPos(0, 97);
      case 126:
         return jjStopAtPos(0, 72);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 106);
         break;
      case 38:
         if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         break;
      case 43:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 45:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000000000L);
      case 60:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000L);
      case 61:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(1, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(1, 87);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 89);
         break;
      case 62:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100008100a00L, active1, 0L);
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 7);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x10042000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1200001500L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x91004000L, active1, 0L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x42d004c0080L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x28000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 105);
         break;
      case 61:
         if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(2, 90);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 91);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8002000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000L, active1, 0L);
      case 102:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100400L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x90410000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000200L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000c1800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000080L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80820000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x80c008000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000L, active1, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2020110000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0xc00L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 7);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x201004000000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100080000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 109:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 7);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 111:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 7);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40200L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x88000080080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20008000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(4, 9);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000400L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000082800L);
      case 107:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 7);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x401000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 7);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc000080L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 7);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 7);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 99:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 39, 7);
         break;
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 33, 7);
         break;
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(5, 10);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 7);
         break;
      case 104:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 43, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 7);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x80082000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         return jjMoveStringLiteralDfa7_0(active0, 0x100080000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 7);
         break;
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 110:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 7, 7);
         break;
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 7);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 7);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(7, 12);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 7);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 7);
         break;
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 106;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAddTwoStates(43, 44);
                  }
                  break;
               case 106:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 34)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  break;
               case 29:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 13);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(43, 54);
                  else if (curChar == 39)
                     jjAddStates(14, 16);
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(17, 21);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAddStates(22, 27);
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 42)
                     jjAddStates(28, 29);
                  break;
               case 3:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 4:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(17, 21);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(17, 21);
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 3);
                  break;
               case 17:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 34);
                  break;
               case 21:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 23:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(35, 39);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 44);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 27:
                  if (curChar == 10)
                     jjCheckNAddStates(0, 3);
                  break;
               case 28:
                  if (curChar == 39)
                     jjAddStates(14, 16);
                  break;
               case 30:
                  if (curChar == 39 && kind > 57)
                     kind = 57;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(32, 30);
                  break;
               case 35:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 37);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 30);
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 39:
                  if (curChar == 39)
                     jjCheckNAdd(30);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(4, 13);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAddTwoStates(43, 44);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 46:
                  if (curChar != 46)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAddTwoStates(47, 44);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAddTwoStates(47, 44);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAddTwoStates(51, 44);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 53);
                  break;
               case 53:
                  if (curChar == 46)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAddTwoStates(57, 44);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 59);
                  break;
               case 59:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 62:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(63);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAddTwoStates(63, 44);
                  break;
               case 64:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(43, 54);
                  break;
               case 65:
                  if (curChar != 48)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddStates(22, 27);
                  break;
               case 66:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddStates(45, 49);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjAddStates(50, 54);
                  break;
               case 82:
                  if (curChar == 34)
                     jjCheckNAddStates(55, 58);
                  break;
               case 83:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 63);
                  break;
               case 87:
                  if (curChar == 34 && kind > 56)
                     kind = 56;
                  break;
               case 89:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 90:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 68);
                  break;
               case 91:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(69, 73);
                  break;
               case 92:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 93:
                  if (curChar == 10)
                     jjCheckNAddStates(55, 58);
                  break;
               case 94:
                  if (curChar == 39)
                     jjAddStates(74, 76);
                  break;
               case 95:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 96:
                  if (curChar == 39 && kind > 58)
                     kind = 58;
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(98, 96);
                  break;
               case 101:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 102:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(96, 103);
                  break;
               case 103:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(104, 96);
                  break;
               case 104:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 105:
                  if (curChar == 39)
                     jjCheckNAdd(96);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 106:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if (curChar == 92)
                     jjAddStates(77, 79);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(30);
                  else if (curChar == 92)
                     jjAddStates(80, 82);
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAdd(7);
                  }
                  if (curChar == 76)
                     jjAddStates(83, 84);
                  break;
               case 1:
               case 3:
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 6:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(7);
                  break;
               case 10:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjAddStates(85, 87);
                  break;
               case 11:
                  if ((0x100000001000L & l) != 0L && kind > 47)
                     kind = 47;
                  break;
               case 12:
                  if (curChar == 76 && kind > 47)
                     kind = 47;
                  break;
               case 13:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 108 && kind > 47)
                     kind = 47;
                  break;
               case 15:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 18:
                  if (curChar == 120)
                     jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(30, 34);
                  break;
               case 20:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(77, 79);
                  break;
               case 23:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 31:
                  if (curChar == 120)
                     jjCheckNAdd(32);
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(32, 30);
                  break;
               case 33:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if (curChar == 92)
                     jjAddStates(80, 82);
                  break;
               case 35:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 44:
                  if ((0x104000001040L & l) != 0L && kind > 50)
                     kind = 50;
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(88, 89);
                  break;
               case 55:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(90, 91);
                  break;
               case 61:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(92, 93);
                  break;
               case 67:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjAddStates(94, 96);
                  break;
               case 68:
                  if ((0x100000001000L & l) != 0L && kind > 48)
                     kind = 48;
                  break;
               case 69:
                  if (curChar == 76 && kind > 48)
                     kind = 48;
                  break;
               case 70:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 108 && kind > 48)
                     kind = 48;
                  break;
               case 72:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(50, 54);
                  break;
               case 75:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(97, 99);
                  break;
               case 76:
                  if ((0x100000001000L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 77:
                  if (curChar == 76 && kind > 49)
                     kind = 49;
                  break;
               case 78:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 108 && kind > 49)
                     kind = 49;
                  break;
               case 80:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 76)
                     jjAddStates(83, 84);
                  break;
               case 83:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 84:
                  if (curChar == 120)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(59, 63);
                  break;
               case 86:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 88:
                  if (curChar == 92)
                     jjAddStates(100, 102);
                  break;
               case 89:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 95:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               case 97:
                  if (curChar == 120)
                     jjCheckNAdd(98);
                  break;
               case 98:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(98, 96);
                  break;
               case 99:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 100:
                  if (curChar == 92)
                     jjAddStates(103, 105);
                  break;
               case 101:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(96);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 106:
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 29:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 1:
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 83:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(55, 58);
                  break;
               case 95:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 106 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   17, 20, 21, 22, 41, 42, 45, 46, 48, 49, 52, 53, 58, 59, 29, 33, 
   34, 9, 10, 11, 13, 15, 66, 67, 68, 70, 72, 73, 3, 4, 17, 20, 
   19, 21, 22, 17, 20, 21, 22, 25, 17, 20, 26, 21, 22, 66, 67, 68, 
   70, 72, 74, 75, 76, 78, 80, 83, 86, 87, 88, 83, 86, 85, 87, 88, 
   83, 86, 87, 88, 91, 83, 86, 92, 87, 88, 95, 99, 100, 23, 24, 27, 
   35, 36, 39, 82, 94, 11, 13, 15, 50, 51, 56, 57, 62, 63, 68, 70, 
   72, 76, 78, 80, 89, 90, 93, 101, 102, 105, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\43\151\146", 
"\43\145\154\163\145", "\43\151\146\144\145\146", "\43\145\156\144\151\146", 
"\43\151\156\143\154\165\144\145", "\43\144\145\146\151\156\145", "\151\156\164", "\141\165\164\157", 
"\142\162\145\141\153", "\143\141\163\145", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\156\165\155", "\143\150\141\162", "\145\170\164\145\162\156", 
"\162\145\164\165\162\156", "\165\156\151\157\156", "\146\154\157\141\164", "\163\150\157\162\164", 
"\165\156\163\151\147\156\145\144", "\146\157\162", "\163\151\147\156\145\144", "\166\157\151\144", 
"\147\157\164\157", "\163\151\172\145\157\146", "\166\157\154\141\164\151\154\145", "\151\146", 
"\163\164\141\164\151\143", "\167\150\151\154\145", "\163\164\162\165\143\164", "\154\157\156\147", 
"\163\167\151\164\143\150", "\162\145\147\151\163\164\145\162", "\164\171\160\145\144\145\146", null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\53", "\55", 
"\52", "\57", "\75\75", "\75", "\41", "\45", "\53\53", "\55\55", "\46", "\174", 
"\136", "\176", "\74\74", "\76\76", "\74", "\76", "\74\75", "\76\75", "\41\75", 
"\46\46", "\174\174", "\53\75", "\55\75", "\52\75", "\57\75", "\45\75", "\46\75", 
"\174\75", "\136\75", "\74\74\75", "\76\76\75", "\133", "\135", "\50", "\51", "\173", 
"\175", "\73", "\54", "\77", "\72", "\56", "\42", "\47", "\56\56\56", "\43\43", 
"\55\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xff87ffffffffff01L, 0xfffffffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[106];
static private final int[] jjstateSet = new int[212];
static protected char curChar;
/** Constructor. */
public lexicoTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public lexicoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 106; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
