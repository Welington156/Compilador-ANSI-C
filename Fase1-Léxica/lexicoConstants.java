/* Generated By:JavaCC: Do not edit this line. lexicoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface lexicoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_BLOCK = 6;
  /** RegularExpression Id. */
  int HASHTAG_IF = 8;
  /** RegularExpression Id. */
  int HASHTAG_ELSE = 9;
  /** RegularExpression Id. */
  int HASHTAG_IFDEF = 10;
  /** RegularExpression Id. */
  int HASHTAG_ENDIF = 11;
  /** RegularExpression Id. */
  int HASHTAG_INCLUDE = 12;
  /** RegularExpression Id. */
  int HASHTAG_DEFINE = 13;
  /** RegularExpression Id. */
  int INT = 14;
  /** RegularExpression Id. */
  int AUTO = 15;
  /** RegularExpression Id. */
  int BREAK = 16;
  /** RegularExpression Id. */
  int CASE = 17;
  /** RegularExpression Id. */
  int CONST = 18;
  /** RegularExpression Id. */
  int CONTINUE = 19;
  /** RegularExpression Id. */
  int KWDEFAULT = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int DOUBLE = 22;
  /** RegularExpression Id. */
  int ELSE = 23;
  /** RegularExpression Id. */
  int ENUM = 24;
  /** RegularExpression Id. */
  int CHAR = 25;
  /** RegularExpression Id. */
  int EXTERN = 26;
  /** RegularExpression Id. */
  int RETURN = 27;
  /** RegularExpression Id. */
  int UNION = 28;
  /** RegularExpression Id. */
  int FLOAT = 29;
  /** RegularExpression Id. */
  int SHORT = 30;
  /** RegularExpression Id. */
  int UNSIGNED = 31;
  /** RegularExpression Id. */
  int FOR = 32;
  /** RegularExpression Id. */
  int SIGNED = 33;
  /** RegularExpression Id. */
  int VOID = 34;
  /** RegularExpression Id. */
  int GOTO = 35;
  /** RegularExpression Id. */
  int SIZEOF = 36;
  /** RegularExpression Id. */
  int VOLATILE = 37;
  /** RegularExpression Id. */
  int IF = 38;
  /** RegularExpression Id. */
  int STATIC = 39;
  /** RegularExpression Id. */
  int WHILE = 40;
  /** RegularExpression Id. */
  int STRUCT = 41;
  /** RegularExpression Id. */
  int LONG = 42;
  /** RegularExpression Id. */
  int SWITCH = 43;
  /** RegularExpression Id. */
  int REGISTER = 44;
  /** RegularExpression Id. */
  int TYPEDEF = 45;
  /** RegularExpression Id. */
  int ID = 46;
  /** RegularExpression Id. */
  int INT_DECIMAL = 47;
  /** RegularExpression Id. */
  int INT_OCTAL = 48;
  /** RegularExpression Id. */
  int INT_HEXADECIMAL = 49;
  /** RegularExpression Id. */
  int FLOAT_CONSTANT = 50;
  /** RegularExpression Id. */
  int ASCII_ESCAPE = 51;
  /** RegularExpression Id. */
  int HEX_ESCAPE = 52;
  /** RegularExpression Id. */
  int OCTAL_ESCAPE = 53;
  /** RegularExpression Id. */
  int STRING_CONTINUE = 54;
  /** RegularExpression Id. */
  int STRING_LITERAL = 55;
  /** RegularExpression Id. */
  int WIDE_STRING_LITERAL = 56;
  /** RegularExpression Id. */
  int CHAR_LITERAL = 57;
  /** RegularExpression Id. */
  int WIDE_CHAR_LITERAL = 58;
  /** RegularExpression Id. */
  int PLUS = 59;
  /** RegularExpression Id. */
  int MINUS = 60;
  /** RegularExpression Id. */
  int MULT = 61;
  /** RegularExpression Id. */
  int DIV = 62;
  /** RegularExpression Id. */
  int EQ = 63;
  /** RegularExpression Id. */
  int ASSIGN = 64;
  /** RegularExpression Id. */
  int NOT = 65;
  /** RegularExpression Id. */
  int MOD = 66;
  /** RegularExpression Id. */
  int INCREMENT = 67;
  /** RegularExpression Id. */
  int DECREMENT = 68;
  /** RegularExpression Id. */
  int BITWISE_AND = 69;
  /** RegularExpression Id. */
  int BITWISE_OR = 70;
  /** RegularExpression Id. */
  int BITWISE_XOR = 71;
  /** RegularExpression Id. */
  int BITWISE_NOT = 72;
  /** RegularExpression Id. */
  int SHIFT_LEFT = 73;
  /** RegularExpression Id. */
  int SHIFT_RIGHT = 74;
  /** RegularExpression Id. */
  int LESS_THAN = 75;
  /** RegularExpression Id. */
  int GREATER_THAN = 76;
  /** RegularExpression Id. */
  int LESS_THAN_OR_EQUAL = 77;
  /** RegularExpression Id. */
  int GREATER_THAN_OR_EQUAL = 78;
  /** RegularExpression Id. */
  int NOT_EQUAL = 79;
  /** RegularExpression Id. */
  int LOGICAL_AND = 80;
  /** RegularExpression Id. */
  int LOGICAL_OR = 81;
  /** RegularExpression Id. */
  int PLUS_ASSIGN = 82;
  /** RegularExpression Id. */
  int MINUS_ASSIGN = 83;
  /** RegularExpression Id. */
  int MULTIPLY_ASSIGN = 84;
  /** RegularExpression Id. */
  int DIVIDE_ASSIGN = 85;
  /** RegularExpression Id. */
  int MODULUS_ASSIGN = 86;
  /** RegularExpression Id. */
  int AND_ASSIGN = 87;
  /** RegularExpression Id. */
  int OR_ASSIGN = 88;
  /** RegularExpression Id. */
  int XOR_ASSIGN = 89;
  /** RegularExpression Id. */
  int SHIFT_LEFT_ASSIGN = 90;
  /** RegularExpression Id. */
  int SHIFT_RIGHT_ASSIGN = 91;
  /** RegularExpression Id. */
  int LBRACKET = 92;
  /** RegularExpression Id. */
  int RBRACKET = 93;
  /** RegularExpression Id. */
  int LPAREN = 94;
  /** RegularExpression Id. */
  int RPAREN = 95;
  /** RegularExpression Id. */
  int LBRACE = 96;
  /** RegularExpression Id. */
  int RBRACE = 97;
  /** RegularExpression Id. */
  int SEMICOLON = 98;
  /** RegularExpression Id. */
  int COMMA = 99;
  /** RegularExpression Id. */
  int TERNARY = 100;
  /** RegularExpression Id. */
  int COLON = 101;
  /** RegularExpression Id. */
  int DOT = 102;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE = 103;
  /** RegularExpression Id. */
  int SINGLE_QUOTE = 104;
  /** RegularExpression Id. */
  int ELLIPSIS = 105;
  /** RegularExpression Id. */
  int DOUBLE_HASH = 106;
  /** RegularExpression Id. */
  int ARROW = 107;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"\\r\"",
    "<COMMENT_BLOCK>",
    "\"fortran\"",
    "\"#if\"",
    "\"#else\"",
    "\"#ifdef\"",
    "\"#endif\"",
    "\"#include\"",
    "\"#define\"",
    "\"int\"",
    "\"auto\"",
    "\"break\"",
    "\"case\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"char\"",
    "\"extern\"",
    "\"return\"",
    "\"union\"",
    "\"float\"",
    "\"short\"",
    "\"unsigned\"",
    "\"for\"",
    "\"signed\"",
    "\"void\"",
    "\"goto\"",
    "\"sizeof\"",
    "\"volatile\"",
    "\"if\"",
    "\"static\"",
    "\"while\"",
    "\"struct\"",
    "\"long\"",
    "\"switch\"",
    "\"register\"",
    "\"typedef\"",
    "<ID>",
    "<INT_DECIMAL>",
    "<INT_OCTAL>",
    "<INT_HEXADECIMAL>",
    "<FLOAT_CONSTANT>",
    "<ASCII_ESCAPE>",
    "<HEX_ESCAPE>",
    "<OCTAL_ESCAPE>",
    "<STRING_CONTINUE>",
    "<STRING_LITERAL>",
    "<WIDE_STRING_LITERAL>",
    "<CHAR_LITERAL>",
    "<WIDE_CHAR_LITERAL>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"==\"",
    "\"=\"",
    "\"!\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"<<\"",
    "\">>\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\"?\"",
    "\":\"",
    "\".\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"...\"",
    "\"##\"",
    "\"->\"",
  };

}
